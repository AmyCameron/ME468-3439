ME 468: Computer Modeling and Simulation of Autonomous Vehicles & Robots Assignment 2
Due: Thursday, 02/10 at 9:00 PM
Submit responses to all tasks which don’t specify a file name in a file called assignment2.{txt, docx, pdf, rtf, odt} (choose one of the formats). Files that don’t contain source code (Python, C, C++, etc.) should be uploaded to Canvas. If the assignment calls for uploading multiple files, upload the files separately (not zipped) to Canvas.
All commands or code in this assignment must work in a container based off the
gitlab.wacc.wisc.edu/me468/dockerimage:hw02
image. Take a look at Problem 3 of Assignment 01 to recall what you had to do in order to set up your Docker operation properly. Just like there, tag this image as me468, to save you some typing.
All the code that you push in your git repo should be in a subfolder called a02, which is at the same level as a01.
1. [Purpose: get familiar with Python. Can help: any TA/instructor.]
a) Write a Python program called mat-vecMult.py which multiplies a matrix A by a vector b to get c = Ab. This operation should be done in two ways. First, by using a double for loop to carry out the multiplication. Then, by using the function[s] that you find useful from numpy. In both cases, use numpy arrays. Your program should:
• Take a positive integer command line argument n (no need to validate the user input; your program will be tested with civilized values)
• Initialize A with random numbers in the range of [-1, 1]. Use the support for random number generation from Python. Use the uniform distribution, seed it with the value of the current time.
• Initialize all entries of b to be 1.0
• Compute c = A b with a double for loop
• Print the last entry of c
• Compute c = A b drawing on numpy-provided functionality
• Print the last entry of c
• Output the amount of time (in milliseconds) that it took to perform only the matrix
multiplication (i.e. don’t include populating the matrix A and vector b) (see below).
Timing: For timing, time the double for loop 20 times (put that double for loop in- side another loop that takes 20 trips, then do an average and present standard deviation as well). Use https://docs.python.org/3/library/time.html#time.perf counter for timing. Use the same timing idea (time the code 20 times) for the numpy solution.
Other notes:
• This Python script will be run inside the ME468 container (me468:hw02).
• Run command (where n is a positive integer): python3 mat-vecMult.py n
• Example expected output (note that there are four lines of code since you solve the
problem once with the for loop, once with numpy): 1.325
3.5
1.325
0.09
 1

b) Run your code mat-vecMult.py with n set to: 29, 211, ..., 213 (five cases, in total) and include a plot of timing result time vs. n in a file called mat-vecMult.pdf. Use linear-log scale (linear for timing on the y-axis, and log for n on the x-axis) when making the plot. Note that you should have two lines in the plot – one for the for-loop based solution, the other one for the numpy solution. In the legend of the plot report the host OS you used (Linux, Windows, etc.); the chip used, e.g., AMD Ryzen 5 5600G; and the amount of RAM memory in GB.
c) Drop your timing plot on the Piazza forum
d) Push your mat-vecMult.py file into your ME468-XXXX git repo. We’ll pull your solution and execute it in the ME468 container (me468:hw02) just like you did.
2. [Purpose: get familiar with Python. Can help: any TA/instructor.]
NOTE: Do this problem only if you are a graduate student. For undergraduates, this is a bonus problem that if done perfectly can increase your final score for this assignment by 5 points; you cannot get a score higher than 100% on this assignment though.
Write a Python program called sortME468.py that sorts n elems integer values stored in a numpy array. This function should rearrange the values to be in ascending order by using one of the following common algorithms:
• Bubble sort • Merge sort
• Insertion sort • Quick sort
We will NOT make any distinction in grading based on which algorithm you choose to implement, but you should implement your own instead of relying on library functions implemented by somebody else.
The file sortME468.py should:
• Read from the command line the value of n elems
• Create an array of size n elems and fill it with random integers between 0 and 1000. • Call the sort function on that array
• Output the first and last entry of the array after the sort operation
Notes about running:
• Run command: python3 sortME468.py 11
• Forinstance,ifyoustartwith111 179 204 315 5 4 9 3 7 8 0andendwith0 3 4 5 7 8 9 111 179 204 315, your program would print out
111 0
0 315
3. [Purpose: get familiar with recursive calls in Python. Can help: any TA/instructor.]
This problem calls for you to implement a Python code in which a function calls itself to bracket the solution of an equation of the type f(x) = 0, where f is a continuous function. The method
 2

used to bracket the solution is called “bisection” and works as follows. Assume that you have two points xlow and xhi such that f(xlow)f(xhi) ≤ 0, and xlow < xhi. Then, since the function is continuous, somewhere between xlow and xhi there must be a value x⋆ such that f(x⋆) = 0. To get closer to the location of x⋆ on the real axis, you pick up the point xhalf = (xlow +xhi)/2. If f evaluated at xlow and xhalf have the same sign, then you set xlow = xhalf ; otherwise, you set xhi = xhalf . Next, you apply the same process again; i.e., call the same function to apply another bisection. Thus, you have a recurrent function, which calls itself until xhi −xlow < 10−6. You stop the bisection process when this condition is satisfied and return the value of xhalf as an approximation for the root of f(x) = 0.
Your code should be in the file recursiveBisect.py. It should find the root of the function f(x) = ex − 4. You will also have to choose your xlow and xhi. Inside this file, you should have a function called bisecRecursive that calls itself until an approximation of the root it found. Inside the function, you should write the iteration count, the value of xlow, the value of xhi and the value f(xhalf).
Example:
  Iteration 1:  -0.2 6.0 3.1 18.1979
  Iteration 2:     blah
...
Finally, on the last line, you should write the value that approximates the solution of f(x) = 0.
4. [Purpose: get familiar with Python plotting facilities. Can help: any TA/instructor.]
For this problem, you will use the data produced in Problem 1. Therein, you handled two scenarios: (A) matrix-vector multiplication done with numpy support; and (B) hand-crafted, matrix-vector multiplication done with double for-loop. For (A) and then for (B) you generated 100 timing results. This is because for (A) you had five cases to time, and each case was timed 20 times. Another 100 points were generated for (B).
Use the plotting tools available in matplotlib to organize the statistical data that you measured in your experiments. There is a large number of ways in which you choose to present this data. At the end of the day, what your plots should convey is the discrepancy between the timing results in cases (A) and (B). Do your best to generate plots that look sharp and make the point that needs to be conveyed. Keep in mind that you have statistical data, it would be nice to bake that aspect in the images you ultimately generate. Generate as many or as few plots as necessary to make your point and comment on the plots you generate.
For this problem:
• Commit to your git repo the Python file plotting.py with the commands used to plot data
• Post your plots on Piazza for other to see what is possible. If there is no thread yet, start one Piazza thread that read “Problem 4 Plots”.
• Upload a PDF to Canvas that has your plots, along with your comments on the nature of the results you obtained.
NOTE: Here’s a place to see what can be accomplished with matplotlib: https://www. machinelearningplus.com/plots/top-50-matplotlib-visualizations-the-master-plots-python/.
3

5. [Purpose: get familiar Python packages. Can help: any TA/instructor.]
For this problem, you’ll have to choose five different packages from PyPI at https://pypi. org/. Explain what caught your eye and why you selected these five as opposed to other five. Specifically,
a) For each package selected, provide the PyPI link and say what it does, in up to two sentences or so
b) For each package selected, explain in two sentences or so why you chose this as one of your five packages. Why did you like it?
c) For one of the five packages – install it in your me468 container using pip install --user <package-name> and generate one Python program that showcases its use. The shorter the program, the better. Call this program demoPackage.py.
For this problem:
• Submit, via canvas, the responses to parts a) and b).
• Push a file called demoPackage.py to your repo in assignments/a02/
• Push a file called requirements.txt to you repo in assignments/a02/ which contains a list of packages, one per line, required by demoPackage.py, such that pip install --user -r requirements.txt installs the necessary dependencies to run your program. See https:// note.nkmk.me/en/python-pip-install-requirements/ for more on requirements.txt functionality.
• To run your code, we will enter the ME468 HW02 container and run >> pip install --user -r requirements.txt
>> python3 demoPackage.py
from inside your repo under assignments/a02/.
4
